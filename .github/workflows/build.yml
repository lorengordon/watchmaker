name: Build and test

on:
  # Run on demand
  workflow_dispatch:

  # Run pull requests against the default branch
  pull_request:
    branches: [main]

  # Run on push to default branch
  push:
    branches: [main]

concurrency:
  group: build-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  checkout:
    runs-on: ubuntu-latest
    outputs:
      release-condition: ${{ steps.release.outputs.condition }}
      release-version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: recursive

      - name: Set version and check release condition
        id: release
        shell: bash
        run: |
          set -eu -o pipefail
          RELEASE=false
          PRIOR_VERSION=$(git describe --abbrev=0 --tags || true)
          RELEASE_VERSION=$(grep -E "current_version\s*=" .bumpversion.cfg | sed 's/^.*= //' )
          if [[ "$PRIOR_VERSION" = "$RELEASE_VERSION" ]]; then
            # If the current version matches the last tag, we are in a dev build.
            # Update the version in setup.cfg to include a timestamp.
            ver=$(git show -s --format=%cd --date=format:'%Y%m%d%H%M%S')
            sed -i -E "s/^(version = )([0-9]+\.[0-9]+\.[0-9]+).*$/\1\2.dev$ver/" setup.cfg
          else
            # If the current version does not match the last tag, we are in a release build.
            RELEASE=true
          fi
          VERSION="$(grep -E "version\s*=" setup.cfg | sed 's/^.*= //')"
          echo "condition=${RELEASE}"
          echo "version=${VERSION}"
          echo "condition=${RELEASE}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Upload source
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: source
          path: ./**
          if-no-files-found: error
          include-hidden-files: true
          retention-days: 1

  build:
    name: ${{ matrix.name }}
    needs: checkout
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: "3.12"
            name: build
    steps:
      - name: Retrieve source
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: source
          path: .

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements/*.txt

      - run: pip install -r requirements/pip.txt
      - run: pip install -r requirements/basics.txt

      - name: Build package
        run: python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: dists
          path: dist/
          if-no-files-found: error
          retention-days: 1

  standalone:
    name: standalone (${{ matrix.platform }})
    needs: checkout
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            python-version: "3.12"
          - os: ["codebuild-watchmaker-build-${{ github.run_id }}-${{ github.run_attempt }}", image:windows-3.0, image-size:medium]
            platform: windows
            python-version: "3.12"
    steps:
      - name: Retrieve source
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: source
          path: .

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}

      - run: chmod +x ci/prep_docker.sh
        if: matrix.platform == 'linux'
      - run: ci/prep_docker.sh
        if: matrix.platform == 'linux'

      - run: ci/build.ps1
        if: matrix.platform == 'windows'
        shell: pwsh

      - name: Upload standalone binary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: standalone-dists-${{ matrix.platform }}
          path: |
            .pyinstaller/dist/*/*
          if-no-files-found: error
          retention-days: 1

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: ["ubuntu-latest", "windows-2022"]
        include:
          - python-version: "3.7"
            os: "ubuntu-22.04"
    steps:
      - name: Retrieve source
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: source
          path: .

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements/*.txt

      - run: pip install -r requirements/pip.txt
      - run: pip install -r requirements/test.txt

      - name: Retrieve release distributions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: dists
          path: dist/

      - name: Install package
        run: python -m pip install ./dist/watchmaker-*.whl
        shell: bash

      - name: Run tests
        run: pytest -vv tests

  lint:
    name: ${{ matrix.name }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: "3.12"
            name: lint
    steps:
      - name: Retrieve source
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: source
          path: .

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements/*.txt

      - run: pip install -r requirements/pip.txt
      - run: pip install -r requirements/check.txt

      - name: Retrieve release distributions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: dists
          path: dist/

      - name: Install package
        run: python -m pip install ./dist/watchmaker-*.whl

      - run: python setup.py check --strict --metadata
      - run: check-manifest
      - run: black --check .
      - run: flake8
      - run: pylint src/watchmaker

  docs:
    name: ${{ matrix.name }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: "3.12"
            name: docs
    steps:
      - name: Retrieve source
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: source
          path: .

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements/*.txt

      - run: pip install -r requirements/pip.txt
      - run: pip install -r requirements/docs.txt

      - name: Retrieve release distributions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: dists
          path: dist/

      - name: Install package
        run: python -m pip install ./dist/watchmaker-*.whl

      - run: sphinx-build -a -E -W --keep-going -b html docs dist/docs
      - run: sphinx-build -b doctest docs dist/docs
      - run: sphinx-build -b linkcheck docs dist/docs
